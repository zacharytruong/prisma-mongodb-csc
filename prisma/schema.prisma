generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @map("_id")
  name  String
  email String @unique
  pets  Pet[]
}

model Pet {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  images      String[]
  age         Int
  description String
  gender      String
  breed       String
  locationId  String      @db.ObjectId
  location    PetLocation @relation(fields: [locationId], references: [id])
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id])

  @@index([breed])
  @@index([gender])
  @@index([locationId])
}

model PetLocation {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  pets      Pet[]
  stateId   String
  state     State   @relation(fields: [stateId], references: [id])
  cityId    String
  city      City    @relation(fields: [cityId], references: [id])
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
}

model Region {
  id           String      @id @default(uuid()) @map("_id")
  name         String      @unique
  translations Json?
  wikiDataId   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  countries    Country[]
  subregions   Subregion[]
}

model Subregion {
  id           String    @id @default(uuid()) @map("_id")
  name         String    @unique
  translations Json?
  wikiDataId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  regionId     String
  region       Region    @relation(fields: [regionId], references: [id])
  countries    Country[]
}

model Country {
  id                String        @id @default(uuid()) @map("_id")
  name              String
  iso3              String        @unique
  iso2              String        @unique
  numericCode       String?
  phoneCode         String?
  capital           String?
  currency          String?
  currencyName      String?
  currencySymbol    String?
  tld               String?
  native            String?
  region            String?
  subregion         String?
  latitude          Float?
  longitude         Float?
  emoji             String?
  emojiU            String?
  timezones         Json?
  translations      Json?
  wikiDataId        String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  regionId          String?
  regionRelation    Region?       @relation(fields: [regionId], references: [id])
  subregionId       String?
  subregionRelation Subregion?    @relation(fields: [subregionId], references: [id])
  states            State[]
  cities            City[]
  PetLocation       PetLocation[]
}

model State {
  id          String        @id @default(uuid()) @map("_id")
  name        String
  countryCode String
  fipsCode    String?
  iso2        String?
  type        String?
  latitude    Float?
  longitude   Float?
  wikiDataId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  country     Country       @relation(fields: [countryId], references: [id])
  countryId   String
  cities      City[]
  PetLocation PetLocation[]

  @@index([countryId])
}

model City {
  id          String        @id @default(uuid()) @map("_id")
  name        String
  stateCode   String
  countryCode String
  latitude    Float
  longitude   Float
  wikiDataId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  stateId     String
  state       State         @relation(fields: [stateId], references: [id])
  countryId   String
  country     Country       @relation(fields: [countryId], references: [id])
  PetLocation PetLocation[]

  @@index([stateId])
  @@index([countryId])
}
